return {
  "kiyoon/jupynium.nvim",
  -- build = "pip3 install --user .",
  lazy = false,
  build = "conda run --no-capture-output -n jupynium pip install .",
  enabled = vim.fn.isdirectory(vim.fn.expand("~/miniconda3/envs/jupynium")),
  opts = {
    python_host = { "conda", "run", "--no-capture-output", "-n", "jupynium", "python" },
    use_default_keybindings = false,
  },
  keys = {
    {
      "<leader>jx",
      "<cmd>JupyniumExecuteSelectedCells<CR>",
      mode = { "n", "x" },
      ft = "python",
      desc = "Jupynium execute selected cells",
    },
    {
      "<leader>jc",
      "<cmd>JupyniumClearSelectedCellsOutputs<CR>",
      mode = { "n", "x" },
      ft = "python",
      desc = "Jupynium clear selected cells",
    },
    {
      "<leader>jK",
      "<cmd>JupyniumKernelHover<cr>",
      mode = "n",
      ft = "python",
      desc = "Jupynium hover (inspect a variable)",
    },
    {
      "<leader>jz",
      "<cmd>JupyniumToggleSelectedCellsOutputsScroll<cr>",
      mode = { "n", "x" },
      ft = "python",
      desc = "Jupynium toggle selected cell output scroll",
    },
    {
      "<leader>ju",
      "<cmd>JupyniumScrollUp<cr>",
      mode = "n",
      ft = "python",
      desc = "Jupynium scroll up",
    },
    {
      "<leader>jd",
      "<cmd>JupyniumScrollDown<cr>",
      mode = "n",
      ft = "python",
      desc = "Jupynium scroll down",
    },
    {
      "<leader>ja",
      "<cmd>JupyniumStartAndAttachToServer<cr>",
      mode = "n",
      ft = "python",
      desc = "JupyniumStartAndAttachToServer",
    },
    {
      "<leader>js",
      "<cmd>JupyniumStartSync<cr>",
      mode = "n",
      ft = "python",
      desc = "JupyniumStartSync",
    },
  },
}
